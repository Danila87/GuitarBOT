from bs4 import BeautifulSoup
from ast import Lambda
from email import message
from email.message import Message
from glob import escape
from itertools import count
from types import NoneType
from unicodedata import name
from fuzzywuzzy import fuzz
from fuzzywuzzy import process
from telebot import types
from datetime import datetime
from function import *
from datetime import date

import requests
import random
import os
import speech_recognition as sr
import sqlite3
import telebot
import time
import datetime
import re
import yadisk


#TOKEN = os.environ["BOT_TOKEN"]
TOKEN = '5371019683:AAGM6VbDWxOijJqyVLfPoox7JdlCxjsMNpU'
YANDEX_TOKEN = 'y0_AgAAAAAO_DuQAAhmIAAAAADOUpN38O9Jqe8fTx275pqgdwJIP-pbvR8'
y = yadisk.YaDisk(token=YANDEX_TOKEN)
bot = telebot.TeleBot(TOKEN, skip_pending=True)
conn = sqlite3.connect('database//database.db', check_same_thread=False)
cotik = open('img//cotik.jpg', 'rb')
logfile_mat = 'log_files//' + str(datetime.date.today()) + '_mat.log'


# –†–ê–ó–õ–ò–ß–ù–´–ï –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô


# –ê–¥–º–∏–Ω –º–µ–Ω—é
def keyboard_admin(message):
    Keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    btn2 = types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω üìî")
    btn3 = types.KeyboardButton(text="–û—Ç–∑—ã–≤—ã üí¨")
    btn5 = types.KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã üìà")
    btn6 = types.KeyboardButton(text="–°–æ–±—ã—Ç–∏—è üìÖ")
    btn8 = types.KeyboardButton(text="–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úâÔ∏è")
    btn1 = types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")
    Keyboard.add(btn2, btn3, btn5, btn6, btn8 ,btn1)
    time.sleep(1)
    bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = Keyboard)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é 
def keyboard_user(message):
    Keyboard = types.ReplyKeyboardMarkup(row_width = 3, resize_keyboard=True)
    btn2 = types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω üìî")
    btn3 = types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨")
    btn4 = types.KeyboardButton(text="–°–æ–±—ã—Ç–∏—è üìÖ")
    btn1 = types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")
    Keyboard.add(btn2, btn3, btn4, btn1)
    bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é", reply_markup = Keyboard)


# –î–∞/–ù–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def keyboard_yes_no(message):
    keyboard = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    btn1 = types.KeyboardButton(text="–î–∞")
    btn2 = types.KeyboardButton(text="–ù–µ—Ç")
    keyboard.add(btn1, btn2)
    return keyboard


# –ü–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def keyboard_setting_submenu(message, text):
    rows = db_user_select_by_id(id_user = message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
    btn1 = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ üë§")
    btn5 = types.KeyboardButton(text="–ü–µ—Å–µ–Ω–Ω–∏–∫–∏ üìî")
    btn6 = types.KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")
    btn4 = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    if rows[4] == 0 and rows != NoneType:
        btn2 = types.KeyboardButton(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üîî")
    else:
        btn2 = types.KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üîï")
    if rows[6] == 1:
        btn3 = types.KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã üíº")
        keyboard.add(btn1, btn2, btn3, btn5, btn6, btn4)
        bot.send_message(message.chat.id, text, reply_markup = keyboard)
    else:
        keyboard.add(btn1, btn2, btn5, btn6, btn4)
        bot.send_message(message.chat.id, text, reply_markup = keyboard)


# –ü–æ–¥–º–µ–Ω—é "–°–æ–±—ã—Ç–∏—è"
def keyboard_event_submenu(message):

    rows = db_user_select_by_id(id_user = message.from_user.id)    
    keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    btn1 = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è")
    btn3 = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    if rows[6] in (1,2):
        btn2 = types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
        keyboard.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)
    else:
        keyboard.add(btn1, btn3)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)


# –ü–æ–¥–º–µ–Ω—é "–û—Ç–∑—ã–≤—ã"
def keyboard_review_submenu(message):

    rows = db_user_select_by_id(id_user = message.from_user.id)

    if rows[6] == 1 or rows[6] == 2:
        rows = db_user_select_by_id(id_user = message.from_user.id)
        keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
        btn1 = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã")
        btn2 = types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨")
        btn3 = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        keyboard.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)
    else:
        error(message = message)


# –ü–æ–¥–º–µ–Ω—é "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
def keyboard_admin_edit_submenu(message):

    rows = db_user_select_by_id(id_user = message.from_user.id)

    if rows[6] == 1:
        keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
        btn1 = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        btn2 = types.KeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        btn3 = types.KeyboardButton(text="–£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        btn4 = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        keyboard.add(btn2, btn3, btn4, btn1)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)
    else:
        error(message = message)


# –ö–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 
def administrator_call(message):

    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/Danila877')
    keyboard.add(btn1)
    bot.send_message(message.chat.id, "üëá", reply_markup = keyboard)


# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def db_all_users():
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Users LEFT OUTER JOIN Role ON Users.Id_role = Role.Id_role")
    rows = cursor.fetchall()
    return rows


# –í—Å–µ –∞–π–¥–∏ —á–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω—ã–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
def db_user_select():
    cursor = conn.cursor()
    cursor.execute("SELECT id_user FROM Users WHERE Event_status = 1")
    rows = cursor.fetchall()
    return rows


# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –ø–æ –∞–π–¥–∏
def db_user_select_by_id(id_user:int):
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM Users LEFT OUTER JOIN Role ON Users.Id_role = Role.Id_role WHERE id_user = ?", (id_user,))
        rows = cursor.fetchone()
        return rows
    except:
        pass


# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def db_user_insert(id_user: int, first_name: str, last_name:str, nickname: str, event_status: int):
    cursor = conn.cursor()
    cursor.execute('INSERT INTO Users (id_user, First_name, Last_name, Nickname, Event_status, Id_role) VALUES (?,?,?,?,?,3)', (id_user, first_name, last_name, nickname, event_status))
    conn.commit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def db_user_registration_select(id_user: int):
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM Users WHERE id_user = ?', (id_user,))
    rows = cursor.fetchall()
    row = len(rows)
    return row


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def db_user_newsletter_edit(status: int, id_user: int):
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET Event_status = ? WHERE id_user = ?", (status, id_user))
    conn.commit()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def db_user_update(id_user:int, status):
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET Id_role = ? WHERE id_user = ?", (status, id_user))
    conn.commit()


# –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def db_all_admin_select():
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Users LEFT OUTER JOIN Role ON Users.Id_role = Role.Id_role WHERE Users.Id_role = 2")
    rows = cursor.fetchall()
    return rows
    

# –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –û–¢–ó–´–í–ê–ú–ò


# –í—Å—Ç–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
def db_review_insert(id_user:int, text_review: str, looked_status: int, date:str, message):
    try:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO Reviews (id_user, text_review, lookeed_status, date) VALUES (?, ?, ?, ?)', (id_user, text_review, looked_status, date))
        conn.commit()
    except:
        bot.send_message(message.chat.id, "–ò–¥–∏ –æ—Ç—Å—é–¥–∞, —á–µ—Ä—Ç")


# –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤
def db_review_select():
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Reviews LEFT OUTER JOIN Users ON Reviews.id_user = Users.id_user WHERE date > date('now', '-7 days')")
    rows = cursor.fetchall()
    return rows


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
def db_review_update(id_review: int):
    cursor = conn.cursor()
    cursor.execute('UPDATE Reviews SET lookeed_status = 1 WHERE id_review = ?',(id_review,))
    conn.commit()


# –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ó–ê–ü–†–û–°–ê–ú–ò


# –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
def db_requests_count():
    cursor = conn.cursor()
    cursor.execute('SELECT requests, COUNT (*) AS Count FROM Requests GROUP BY requests')
    rows = cursor.fetchall()
    return rows


# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
def db_requests_insert(id_user: int, requests: str, date: str):
    cursor = conn.cursor()
    cursor.execute('INSERT INTO Requests (id_user, requests, date) VALUES (?, ?, ?)', (id_user, requests, date))
    conn.commit()


# –í—ã–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–∞—Ç–µ
def db_requests_select_date(selected_date:str):
    cursor = conn.cursor()
    query = 'SELECT requests, COUNT (*) AS Count FROM Requests WHERE date LIKE ' + selected_date + ' GROUP BY requests'
    cursor.execute(query)
    rows = cursor.fetchall()
    return rows


# –í—ã–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
def db_request_select_date_between(start_date:str, final_date:str):
    cursor = conn.cursor()
    query = "SELECT requests, COUNT (*) AS Count FROM Requests WHERE date BETWEEN " + start_date + " AND " + final_date + " GROUP BY requests"
    cursor.execute(query)
    rows = cursor.fetchall()
    return rows


# –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –°–û–ë–´–¢–ò–Ø–ú–ò


# –í—Å–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
def db_types_events():
    cursor = conn.cursor()
    cursor.execute("SELECT Name_event FROM Type_event")
    rows = cursor.fetchall()
    return rows


# –í—Å—Ç–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
def db_event_insert(dtype_event: int, ddate_event: str, dtext_event: str, ddate_event_techical: str):
    cursor = conn.cursor()
    cursor.execute("INSERT INTO Events (Text_event, Date_event, Date_event_technical ,Event_type) VALUES (?, ?, ?, ?)", (dtext_event, ddate_event, ddate_event_techical ,dtype_event))
    conn.commit()
    

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
def db_event_select_last(type_event: str):
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Events LEFT OUTER JOIN Type_event ON Events.Event_type = Type_event.Id_event WHERE Event_type = ? AND Date_event_technical > date('now') ORDER BY Id_event DESC LIMIT 1", (type_event,))
    rows = cursor.fetchone()
    return rows


# –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–ï–°–ù–Ø–ú–ò


# –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω
def db_song_select_all():
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT * FROM songs')
        rows = cursor.fetchall()
        return rows
    except:
        pass


# –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
def db_song_select(title_song):
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM songs WHERE Title_song = ?',(title_song,))
    rows = cursor.fetchone()
    return rows


# –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def db_song_select_by_type(type_song):
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM Songs LEFT OUTER JOIN Type_song ON Songs.Type_song = Type_song.id_type WHERE Type_song.Type_song = ?', (type_song,))
    rows = cursor.fetchall()
    return rows


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Å–µ–Ω
def db_type_song_select():
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM Type_song ')
    rows = cursor.fetchall()
    return rows


# –û—Ç–±–æ—Ä –ø–µ—Å–µ–Ω
def song_searc(message, title_song):

    keyboard = types.InlineKeyboardMarkup()
    key = False

    for i in db_song_select_all():
        a = fuzz.WRatio(i[2], title_song)
        if a>75:
            bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏: ' + title_song)
            key = True
            break

    if key == False:
        time.sleep(1)
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    if key:
        for i in db_song_select_all():
                a = fuzz.WRatio(i[2], title_song)
                if a>75:
                    btn = types.InlineKeyboardButton(i[1], callback_data=i[1])
                    keyboard.add(btn)
        time.sleep(1)
        bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:", reply_markup = keyboard)


# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò


# –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
def error(message):
    try:
        time.sleep(0.5)
        bot.send_photo(message.chat.id, cotik)
        time.sleep(0.5)
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n–û –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–∑—ã–≤–∞—Ö –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ !)")
        administrator_call(message)
    except:
        bot.send_message(message.chat.id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        administrator_call(message)
        bot.send_photo(message.chat.id, cotik)


# –í—Å–µ –ø–µ—Å–µ–Ω–Ω–∏–∫–∏
def db_all_song_book():
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Song_book")
    rows = cursor.fetchall()
    return rows


# –ü–µ—Å–µ–Ω–Ω–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
def db_song_book_by_title(message, song_book_title):
    cursor = conn.cursor()
    cursor.execute("SELECT file_path FROM Song_book WHERE title_book = ?", (song_book_title,))
    rows = cursor.fetchone()
    file = open (rows[0], 'rb')
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é...")
    bot.send_document(message.chat.id, file)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ú–∞—à–∏
def get_img_from_Masha(message):

    bot.send_message(message.chat.id, '–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–∫–∏\n[////                ]')
    time.sleep(1.5)
    

    image_shalame_list = []
    image_depp_list = []
    line_list = []

    used_links = open("files/used_links.txt", "a")
    used_links2 = open("files/used_links.txt", "r").read().split('\n')

    urlsite = 'https://www.theplace.ru'
    count = 0


    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
    for line in used_links2:
        line_list.append(line)

    bot.edit_message_text ('–°–æ–±–∏—Ä–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n[//////              ]', chat_id=message.chat.id, message_id=message.message_id + 1)
    time.sleep(1)


    # –®–∞–ª–∞–º–µ
    for p in range(1,3):

        url = 'https://www.theplace.ru/photos/timothee_chalamet/?page='+str(p)
        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'lxml')
        images = soup.findAll('div', class_='p-1')

        for image in images:
            link = image.find('a').get('href')
            r2 = requests.get(urlsite + link)
            soup2 = BeautifulSoup(r2.text, 'lxml')
            link2 = soup2.find('img', class_ = 'pic big_pic').get('src')
            image_shalame_list.append(urlsite + link2)
            count = count + 1
            bot.edit_message_text ('–°–æ–±—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ' + str(count) + '\n[/////////           ]', chat_id=message.chat.id, message_id=message.message_id + 1)


    # –î–∂–æ–Ω–Ω–∏
    for p in range(1,3):

        url = 'https://www.theplace.ru/photos/johnny_depp/?page='+str(p)
        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'lxml')
        images = soup.findAll('div', class_='col-6 col-sm-6 col-md-6 col-lg-4 col-xl-3 pb-3')
        for image in images:
            link = image.find('a', class_='photos-pic-card__link').get('href')
            r2 = requests.get(urlsite+link)
            soup2 = BeautifulSoup(r2.text, 'lxml')
            link2 = soup2.find('img', class_='pic big_pic').get('src')
            image_depp_list.append(urlsite+link2)
            count = count + 1
            bot.edit_message_text ('–°–æ–±—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ' + str(count) + '\n[/////////////       ]', chat_id=message.chat.id, message_id=message.message_id + 1)

    bot.edit_message_text ('–í—ã–±–∏—Ä–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n[////////////////    ]', chat_id=message.chat.id, message_id=message.message_id + 1)
    image_list = image_depp_list + image_shalame_list        
    image_list = list(set(image_list) - set(line_list))

    if len(image_list):
        time.sleep(1.5)
        bot.edit_message_text ('–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n[//////////////////  ]', chat_id = message.chat.id, message_id=message.message_id + 1)
        time.sleep(1.5)
        random.shuffle(image_list)
        img_url = random.choice(image_list)
        used_links.write(img_url + '\n')
        bot.edit_message_text ('–ó–∞–≥—Ä—É–∂–µ–Ω–æ\n[////////////////////]', chat_id = message.chat.id, message_id=message.message_id + 1)
        return img_url
    else:
        bot.send_message(message.chat.id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. ')


# –ü–µ—Ä–µ–≤–æ–¥ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
def audio_to_text(dest_name: str, message):
    try:
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ , –≤ —Ñ–æ—Ä–º–∞—Ç–µ ".vaw" –≤ —Ç–µ–∫—Å—Ç
        r = sr.Recognizer() # —Ç–∞–∫–æ–µ –≤–æ–æ–±—â–µ –Ω–∞–¥–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ç—å?
        # —Ç—É—Ç –º—ã —á–∏—Ç–∞–µ–º –Ω–∞—à .vaw —Ñ–∞–π–ª
        message = sr.AudioFile(dest_name)
        with message as source:
            audio = r.record(source)
        result = r.recognize_google(audio, language="ru_RU") # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        return result
    except:
        bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
def mat_check(message, type_event):
    row = db_user_select_by_id(id_user=message.from_user.id)
    words = message.text.split(' ')
    for i in words:
        result = re.match(r'\b((—É|[–Ω–∑]–∞|(—Ö–∏—Ç—Ä–æ|–Ω–µ)?–≤–∑?[—ã—å—ä]|—Å[—å—ä]|(–∏|—Ä–∞)[–∑—Å]—ä?|(–æ[—Ç–±]|–ø–æ–¥)[—å—ä]?|(.\B)+?[–æ–∞–µ–∏])?-?([–µ—ë]–±(?!–æ[—Ä–π])|–∏[–ø–±][–∞–µ][—Ç—Ü]).*?|(–Ω[–∏–µ–∞]|([–¥–ø]|–≤–µ—Ä—Ç)–æ|—Ä–∞[–∑—Å]|–∑?–∞|—Å(–º–µ)?|–æ(—Ç|–¥–Ω–æ)?|–∞–ø—á)?-?—Ö—É([—è–π–∏–µ—ë—é]|–ª–∏(?!–≥–∞–Ω)).*?|(–≤[–∑—ã]|(—Ç—Ä–∏|–¥–≤–∞|—á–µ—Ç—ã—Ä–µ)–∂–¥—ã|(–Ω|—Å—É–∫)–∞)?-?–±–ª(—è(?!(—Ö|—à[–∫–Ω]|–º–±)[–∞—É–µ—ã–∏–æ]).*?|[–µ—ç][–¥—Ç]—å?)|(—Ä–∞[—Å–∑]|[–∑–Ω]–∞|[—Å–æ]|–≤—ã?|–ø(–µ—Ä–µ|—Ä[–æ–∏–µ]|–æ–¥)|–∏[–∑—Å]—ä?|[–∞–æ]—Ç)?–ø[–∏–µ—ë]–∑–¥.*?|(–∑–∞)?–ø[–∏–µ]–¥[–∞–æ–µ]?—Ä([–æ–∞]–º|(–∞—Å)?(–Ω—É.*?|–∏(–ª–∏)?[–Ω—â–∫—Ç–ª]—å?)?|(–æ(—á[–µ–∏])?|–∞—Å)?–∫(–æ–π)|—é–≥)[–∞—É–µ—ã]?|–º–∞–Ω–¥([–∞—É–µ—ã–∏](–ª(–∏[—Å–∑—â])?[–∞—É–µ–∏—ã])?|–æ–π|[–∞–æ]–≤–æ—à—å?(–µ?–∫[–∞—É–µ])?|—é–∫(–æ–≤|[–∞—É–∏])?)|–º—É–¥([—è–∞–∏–æ].*?|–µ?–Ω([—å—é–∏—è]|–µ–π))|–º–ª—è([—Ç–¥]—å)?|–ª—è—Ç—å|([–Ω–∑]–∞|–ø–æ)—Ö|–º[–∞–æ]–ª[–∞–æ]—Ñ—å([—è–∏—é]|[–µ—ë–æ]–π))\b', message.text)
        #result = re.match(r'(\s+|^)[–ø–ün—Ä–†p]?[3–ó–∑–íB–≤–ün–ø—Ä–†pP–êaA–∞–ûoO0–æ]?[—Å–°cC–∏–òuU–ûoO0–æ–êaA–∞—ã–´—É–£y—Ç–¢T]?[–ü–øn][–∏–òuUeE–µ–ï][–∑–ó3][–î–¥Dd]\w*[\?\,\.\;\-]*|(\s+|^)[—Ä–†pP–ø–ün]?[—Ä–†pP–æ–ûoO0–∞–êaA–∑–ó3]?[–æ–ûoO0–∏–òuU–∞–êaAcC—Å–°–∑–ó3—Ç–¢T—É–£y]?[Xx–•—Ö][—É–£y][–π–ô–µ–ïeEe—è–Ø9—é–Æ]\w*[\?\,\.\;\-]*|(\s+|^)[–±–ø–ün–ë6][–ª–õ][—è–Ø9]([–¥—Ç–î–¢DT]\w*)?[\?\,\.\;\-]*|(\s+|^)(([–∑–ó–æ–ûoO03]?[–∞–êaA—Ç–¢T]?[—ä–™]?)|(\w+[–æ–ûOo0–µ–ïeE]))?[–µ–ïeE–∏–òuU—ë–Å][–±–ë6–ø–ü]([–∞–êaA–∏–òuU—É–£y]\w*)?[\?\,\.\;\-]*', i)
        if result != None:
            with open(logfile_mat, 'a', encoding='utf-8') as logm:
                logm.write(str(datetime.datetime.today().strftime("%H:%M:%S")) + ': –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(row[1]) + ' ' + str(row[2]) + ' ' + ' –Ω–∞–ø–∏—Å–∞–ª "' + i + '" –ø—Ä–∏ ' + type_event + '.\n')
            try:
                y.upload("log_files/"+str(datetime.date.today()) + '_mat.log', "GuitarBOT_log/Log_mat/"+str(datetime.date.today()) + '_mat.log')
            except:
                y.remove("GuitarBOT_log/Log_mat/"+str(datetime.date.today()) + '_mat.log', permanently=True)
                y.upload("log_files/"+str(datetime.date.today()) + '_mat.log', "GuitarBOT_log/Log_mat/"+str(datetime.date.today()) + '_mat.log')

            return True


# –ê–≤—Ç–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def registration(message):
    rows = db_user_select_by_id(id_user = message.from_user.id)
    if rows == None:
        id_user = message.from_user.id
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        nickname = message.from_user.username
        db_user_insert(id_user=id_user, first_name=first_name, last_name=last_name, nickname=nickname, event_status=0)