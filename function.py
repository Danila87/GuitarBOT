from bs4 import BeautifulSoup
from ast import Lambda
from email import message
from email.message import Message
from glob import escape
from itertools import count
from types import NoneType
from unicodedata import name
from fuzzywuzzy import fuzz
from fuzzywuzzy import process
from telebot import types
from datetime import datetime
from function import *
from datetime import date

import requests
import random
import os
import speech_recognition as sr
import sqlite3
import telebot
import time
import datetime
import re
import yadisk
import threading


"""
    –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï

    Variable:
        TOKEN : –¢–æ–∫–µ–Ω –±–æ—Ç–∞. –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–æ–∫–µ–Ω –∑–∞—à–∏—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã —Å–µ—Ä–≤–µ—Ä–∞ (Heroku)
        YANDEX_TOKEN : –¢–æ–∫–µ–Ω –æ—Ç –Ø.–î–∏—Å–∫. –ù—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –Ø.–î–∏—Å–∫
        ydisk : –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø.–î–∏—Å–∫
        bot : –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π telebot
        conn : –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cotik : –Ø —Ö–∑ –ø–æ—á–µ–º—É –Ω–µ —Å–¥–µ–ª–∞–ª —á–µ—Ä–µ–∑ with ... as –Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–∫–∞ –∫–æ—Ç–∏–∫–∞
        logfile_mat : –ø—É—Ç—å –∫ –ª–æ–≥ —Ñ–∞–π–ª—É —Å –º–∞—Ç–∞–º–∏
"""

#TOKEN = os.environ["BOT_TOKEN"]
TOKEN = '5371019683:AAGM6VbDWxOijJqyVLfPoox7JdlCxjsMNpU'
YANDEX_TOKEN = 'y0_AgAAAAAO_DuQAAhmIAAAAADOUpN38O9Jqe8fTx275pqgdwJIP-pbvR8'
ydisk = yadisk.YaDisk(token=YANDEX_TOKEN)
bot = telebot.TeleBot(TOKEN, skip_pending=True)
conn = sqlite3.connect('database//database.db', check_same_thread=False)
cotik = open('img//cotik.jpg', 'rb')
logfile_mat = 'log_files//' + str(datetime.date.today()) + '_mat.log'


# –†–ê–ó–õ–ò–ß–ù–´–ï –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô


def get_main_menu(message):
    rows = db_select_user_by_id(id_user=message.from_user.id)
    
    keyboard = types.ReplyKeyboardMarkup(row_width = 3, resize_keyboard=True)
    btn_song_list = types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω üìî")
    btn_reviews = types.KeyboardButton(text="–û—Ç–∑—ã–≤—ã üí¨")
    btn_events = types.KeyboardButton(text="–°–æ–±—ã—Ç–∏—è üìÖ")
    btn_resend_message = types.KeyboardButton(text="–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úâÔ∏è")
    btn_requests = types.KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã üìà")
    btn_settings = types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")

    if rows[6] in (1,2):
        keyboard.add(btn_song_list, btn_reviews, btn_events, btn_resend_message, btn_requests, btn_settings)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é", reply_markup=keyboard)
    else:
        keyboard.add(btn_song_list, btn_reviews, btn_events, btn_settings)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é", reply_markup=keyboard)


def get_keyboard_yes_no():

    """
    –í—ã–∑–æ–≤ –º–µ–Ω—é –î–∞/–Ω–µ—Ç

    Returns:
        keyboard: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç keyboard, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –≤—Å—Ç–∞–≤–∞—Ç—å –≤ send_message
    """

    keyboard = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    btn_yes = types.KeyboardButton(text="–î–∞")
    btn_no = types.KeyboardButton(text="–ù–µ—Ç")
    keyboard.add(btn_yes, btn_no)
    return keyboard


def get_keyboard_setting_submenu(message):

    """
    –í—ã–∑–æ–≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
    """

    rows = db_select_user_by_id(id_user = message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
    btn_show_data = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ üë§")
    btn_song_books = types.KeyboardButton(text="–ü–µ—Å–µ–Ω–Ω–∏–∫–∏ üìî")
    btn_help = types.KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")
    btn_ban_list = types.KeyboardButton(text="–ë–∞–Ω –ª–∏—Å—Ç")
    btn_admin = types.KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã üíº")
    btn_back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")

    if rows[4] == 0 and rows != NoneType:
        btn_newsletter = types.KeyboardButton(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üîî")
    else:
        btn_newsletter = types.KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üîï")

    if rows[6] == 1:
        keyboard.add(btn_show_data, btn_newsletter, btn_admin, btn_song_books, btn_help, btn_ban_list, btn_back)
        bot.send_message(message.chat.id, '–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ', reply_markup = keyboard)
    else:
        keyboard.add(btn_show_data, btn_newsletter, btn_song_books, btn_help, btn_back)
        bot.send_message(message.chat.id, '–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ', reply_markup = keyboard)


def get_keyboard_event_submenu(message):

    """
    –í—ã–∑–æ–≤ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
    """

    rows = db_select_user_by_id(id_user = message.from_user.id)    
    keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    btn_event_all = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è")
    btn_back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    btn_create_event = types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")

    if rows[6] in (1,2):
        keyboard.add(btn_event_all, btn_create_event, btn_back)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)
    else:
        keyboard.add(btn_event_all, btn_back)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)


def get_keyboard_review_submenu(message):

    """
    –í—ã–∑–æ–≤ –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
    """

    rows = db_select_user_by_id(id_user = message.from_user.id)
    btn_pull_rewievs = types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨")
    btn_rewievs_all = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã")
    btn_back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")

    if rows[6] in (1,2):
        keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
        keyboard.add(btn_rewievs_all, btn_pull_rewievs, btn_back)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard = True)
        keyboard.add(btn_pull_rewievs, btn_back)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)

def get_keyboard_admin_edit_submenu(message):

    """
    –í—ã–∑–æ–≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
    """

    rows = db_select_user_by_id(id_user = message.from_user.id)

    if rows[6] == 1:
        keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
        btn_back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        btn_set_admin = types.KeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        btn_delete_admin = types.KeyboardButton(text="–£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        btn_admin_all = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        keyboard.add(btn_set_admin, btn_delete_admin, btn_admin_all, btn_back)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é", reply_markup = keyboard)
    else:
        error(message=message)


def get_administrator_call(message, chat_id):

    """
    –í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
    """

    keyboard = types.InlineKeyboardMarkup()
    btn_admin = types.InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/Danila877')
    keyboard.add(btn_admin)
    bot.send_message(chat_id, "üëá", reply_markup = keyboard)


# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò


def db_select_users_all():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    Returns:
        rows: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
    """

    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Users LEFT OUTER JOIN Role ON Users.Id_role = Role.Id_role")
    rows = cursor.fetchall()
    return rows


def db_select_user_by_newsletter():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É

    Returns:
        rows: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
    """

    cursor = conn.cursor()
    cursor.execute("SELECT id_user FROM Users WHERE Event_status = 1")
    rows = cursor.fetchall()
    return rows


def db_select_user_by_id(id_user:int):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        id_user (int): Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å

    Returns:
        rows: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
    """

    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM Users LEFT OUTER JOIN Role ON Users.Id_role = Role.Id_role WHERE id_user = ?", (id_user,))
        rows = cursor.fetchone()
        return rows
    except:
        pass


def db_insert_user(id_user:int, first_name:str=None, last_name:str=None, nickname:str=None, event_status:int=0):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    Args:
        id_user (int): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_name (str): –ò–º—è
        last_name (str): –§–∞–º–∏–ª–∏—è
        nickname (str): –ù–∏–∫–Ω–µ–π–º
        event_status (int): –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (1-–î–∞, 2-–ù–µ—Ç)
    """

    try:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO Users (id_user, First_name, Last_name, Nickname, Event_status, Id_role) VALUES (?,?,?,?,?,3)', (id_user, first_name, last_name, nickname, event_status))
        conn.commit()
    except:
        pass


def db_select_user_registration(id_user:int):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

    Args:
        id_user (int): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å

    Returns:
        rows: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–æ–ª-–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)
    """

    cursor = conn.cursor()
    cursor.execute('SELECT * FROM Users WHERE id_user = ?', (id_user,))
    rows = cursor.fetchall()
    row = len(rows)
    return row


def db_update_user_newsletter(status: int, id_user: int):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        status (int): –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏. 1 - –ü–æ–¥–∫–ª—é—á–µ–Ω–æ, 2 - –û—Ç–∫–ª—é—á–µ–Ω–æ
        id_user (int): Id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET Event_status = ? WHERE id_user = ?", (status, id_user))
    conn.commit()


def db_update_user(id_user:int, status:int):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è/–ø–æ–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Args:
        id_user (int): Id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status (int): –°—Ç–∞—Ç—É—Å(—Ä–æ–ª—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 1 - –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, 2 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, 3 - –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """

    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET Id_role = ? WHERE id_user = ?", (status, id_user))
    conn.commit()


def db_select_all_admin():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–≤—Å–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤)
    """

    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Users LEFT OUTER JOIN Role ON Users.Id_role = Role.Id_role WHERE Users.Id_role = 2")
    rows = cursor.fetchall()
    return rows
    

# –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –û–¢–ó–´–í–ê–ú–ò


def db_insert_review(id_user:int, text_review:str, looked_status:int, date:str):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        id_user (int): Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text_review (str): –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        looked_status (int): –°—Ç–∞—Ç—É—Å (–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ/ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ)
        date (str): –î–∞—Ç–∞
    """

    try:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO Reviews (id_user, text_review, lookeed_status, date) VALUES (?, ?, ?, ?)', (id_user, text_review, looked_status, date))
        conn.commit()
    except:
        pass


def db_select_reviews():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
    """

    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Reviews LEFT OUTER JOIN Users ON Reviews.id_user = Users.id_user WHERE date > date('now', '-7 days')")
    rows = cursor.fetchall()
    return rows


def db_update_review(id_review:int):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞

    Args:
        id_review (int): Id –æ—Ç–∑—ã–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """

    cursor = conn.cursor()
    cursor.execute('UPDATE Reviews SET lookeed_status = 1 WHERE id_review = ?',(id_review,))
    conn.commit()


# –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ó–ê–ü–†–û–°–ê–ú–ò


def db_requests_count():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤  
    """

    cursor = conn.cursor()
    cursor.execute('SELECT requests, COUNT (*) AS Count FROM Requests GROUP BY requests ORDER BY Count DESC')
    rows = cursor.fetchall()
    return rows


def db_insert_request(id_user:int, requests:str, date:str):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

    Args:
        id_user (int): Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        requests (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        date (str): –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    """

    try:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO Requests (id_user, requests, date) VALUES (?, ?, ?)', (id_user, requests, date))
        conn.commit()
    except:
        pass


def db_select_requests_by_date(selected_date:str):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É

    Args:
        selected_date (str): –î–∞—Ç–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã. –ú–æ–∂–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≥–æ–¥, –≥–æ–¥-–º–µ—Å—è—Ü, –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å.
                            –ù–∞–ø—Ä–∏–º–µ—Ä "2022-01-% –ø–æ–ª—É—á–∏—Ç –∑–∞–ø–∏—Å–∏ –∑–∞ –≤–µ—Å—å —è–Ω–≤–∞—Ä—å 2022 –≥–æ–¥–∞"

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤)
    """

    cursor = conn.cursor()
    query = 'SELECT requests, COUNT (*) AS Count FROM Requests WHERE date LIKE ' + selected_date + ' GROUP BY requests ORDER BY Count DESC'
    cursor.execute(query)
    rows = cursor.fetchall()
    return rows


def db_select_requests_period(start_date:str, final_date:str):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    Args:
        start_date (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        final_date (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤)
    """

    cursor = conn.cursor()
    query = "SELECT requests, COUNT (*) AS Count FROM Requests WHERE date BETWEEN " + start_date + " AND " + final_date + " GROUP BY requests ORDER BY Count DESC"
    cursor.execute(query)
    rows = cursor.fetchall()
    return rows


# –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –°–û–ë–´–¢–ò–Ø–ú–ò


def db_select_event_types():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π

    Returns:
        rows: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π)
    """

    cursor = conn.cursor()
    cursor.execute("SELECT Name_event FROM Type_event")
    rows = cursor.fetchall()
    return rows


def db_insert_event(dtype_event:int, ddate_event:str, dtext_event:str, ddate_event_techical:str):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è

    P.S. –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –¥–∞—Ç–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è. –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫ "6 –∞–ø—Ä–µ–ª—è", –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è
    —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫ "2022-11-01"

    Args:
        dtype_event (int): –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
        ddate_event (str): –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è (–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è)
        dtext_event (str): –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
        ddate_event_techical (str): –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞
    """

    try:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Events (Text_event, Date_event, Date_event_technical ,Event_type) VALUES (?, ?, ?, ?)", (dtext_event, ddate_event, ddate_event_techical ,dtype_event))
        conn.commit()
    except:
        pass


def db_select_latest_event(type_event: str):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è

    Args:
        type_event (str): –¢–∏–ø —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏)
    """

    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Events LEFT OUTER JOIN Type_event ON Events.Event_type = Type_event.Id_event WHERE Event_type = ? AND Date_event_technical > date('now') ORDER BY Id_event DESC LIMIT 1", (type_event,))
    rows = cursor.fetchone()
    return rows


# –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–ï–°–ù–Ø–ú–ò


def db_select_song_all():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Å–µ–Ω

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
    """

    cursor = conn.cursor()
    try:
        cursor.execute('SELECT * FROM songs')
        rows = cursor.fetchall()
        return rows
    except:
        pass



def db_select_song(title_song:str):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–Ω–∏ –ø–æ –µ—ë –∑–∞–≥–æ–ª–æ–≤–∫—É

    Args:
        title_song (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–µ—Ç–µ–∂–µ–π (–¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Å–Ω–µ)
    """

    cursor = conn.cursor()
    cursor.execute('SELECT * FROM songs WHERE Title_song = ?',(title_song,))
    rows = cursor.fetchone()
    return rows


def db_select_song_by_type(type_song:str):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Args:
        type_song (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞—Ç—å –ø–µ—Å–Ω–∏

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π 
    """

    cursor = conn.cursor()
    cursor.execute('SELECT * FROM Songs LEFT OUTER JOIN Type_song ON Songs.Type_song = Type_song.id_type WHERE Type_song.Type_song = ?', (type_song,))
    rows = cursor.fetchall()
    return rows


def db_select_song_type():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Å–µ–Ω

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Å–µ–Ω)
    """

    cursor = conn.cursor()
    cursor.execute('SELECT * FROM Type_song ')
    rows = cursor.fetchall()
    return rows


def song_search(message, title_song:str = 'None'):

    """
    –û—Ç–±–æ—Ä –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–µ—Å–µ–Ω –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
        title_song (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∏–¥—ë—Ç –æ—Ç–±–æ—Ä
    """

    keyboard = types.InlineKeyboardMarkup()
    key = False

    for i in db_select_song_all():
        a = fuzz.WRatio(i[2], title_song)
        if a>75:
            bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏: ' + title_song)
            key = True
            break

    if key == False:
        time.sleep(1)
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    if key:
        for i in db_select_song_all():
                a = fuzz.WRatio(i[2], title_song)
                if a>75:
                    btn = types.InlineKeyboardButton(i[1], callback_data=i[1])
                    keyboard.add(btn)
        time.sleep(1)
        bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:", reply_markup = keyboard)


# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò


def error(message):

    """
    –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏. –í—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
    """

    try:
        time.sleep(0.5)
        bot.send_photo(message.chat.id, cotik)
        time.sleep(0.5)
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n–û –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–∑—ã–≤–∞—Ö –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ !)")
        get_administrator_call(message, message.chat.id)
    except:
        bot.send_message(message.chat.id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        get_administrator_call(message, message.chat.id)
        bot.send_photo(message.chat.id, cotik)


def db_select_songbook_all():

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω–Ω–∏–∫–æ–≤

    Returns:
        rows: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
    """

    cursor = conn.cursor()

    cursor.execute("SELECT * FROM Song_book")
    rows = cursor.fetchall()
    return rows


def db_select_songbook_by_title(message, song_book_title:str = "–ü–µ—Å–µ–Ω–Ω–∏–∫ –ò–û–°–ü–û"):

    """
    SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–µ–Ω–Ω–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ø–µ—Å–µ–Ω–Ω–∏–∫–æ–º

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
        song_book_title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Å–µ–Ω–Ω–∏–∫–∞. –ü–æ –¥–µ—Ñ–æ–ª—Ç—É —Å—Ç–æ–∏—Ç –ø–µ—Å–µ–Ω–Ω–∏–∫ –ò–û –°–ü–û
    """

    cursor = conn.cursor()
    cursor.execute("SELECT file_path FROM Song_book WHERE title_book = ?", (song_book_title,))
    rows = cursor.fetchone()
    file = open (rows[0], 'rb')
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é...")
    bot.send_document(message.chat.id, file)


def get_img_from_Masha(message):

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¢–∏–º–æ—Ç–∏ –®–∞–ª–∞–º–µ –∏–ª–∏ –î–∂–æ–Ω–Ω–∏ –î–µ–ø–ø–∞ –¥–ª—è –ú–∞—à–∏. –°–¥–µ–ª–∞–ª —á–∏—Å—Ç–æ –ø–æ –ø—Ä–∏–∫–æ–ª—É

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot

    Returns:
        img_url: –í–æ–≤–∑—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –æ—Ç–∫—É–¥–∞ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ
    """

    bot.send_message(message.chat.id, '–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–∫–∏\n[////                ]')
    time.sleep(1.5)
    

    image_shalame_list = []
    image_depp_list = []
    line_list = []

    used_links = open("files/used_links.txt", "a")
    used_links2 = open("files/used_links.txt", "r").read().split('\n')

    urlsite = 'https://www.theplace.ru'
    count = 0


    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
    for line in used_links2:
        line_list.append(line)

    bot.edit_message_text ('–°–æ–±–∏—Ä–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n[//////              ]', chat_id=message.chat.id, message_id=message.message_id + 1)
    time.sleep(1)


    # –®–∞–ª–∞–º–µ
    def shalame_get_link():
        
        for p in range(1,3):

            url = 'https://www.theplace.ru/photos/timothee_chalamet/?page='+str(p)
            r = requests.get(url)
            soup = BeautifulSoup(r.text, 'lxml')
            images = soup.findAll('div', class_='p-1')

            for image in images:
                link = image.find('a').get('href')
                r2 = requests.get(urlsite + link)
                soup2 = BeautifulSoup(r2.text, 'lxml')
                link2 = soup2.find('img', class_ = 'pic big_pic').get('src')
                image_shalame_list.append(urlsite + link2)


    # –î–∂–æ–Ω–Ω–∏
    def jonny_get_link():

        for p in range(1,3):

            url = 'https://www.theplace.ru/photos/johnny_depp/?page='+str(p)
            r = requests.get(url)
            soup = BeautifulSoup(r.text, 'lxml')
            images = soup.findAll('div', class_='col-6 col-sm-6 col-md-6 col-lg-4 col-xl-3 pb-3')
            for image in images:
                link = image.find('a', class_='photos-pic-card__link').get('href')
                r2 = requests.get(urlsite+link)
                soup2 = BeautifulSoup(r2.text, 'lxml')
                link2 = soup2.find('img', class_='pic big_pic').get('src')
                image_depp_list.append(urlsite+link2)

    
    t1 = threading.Thread(target = shalame_get_link)
    t2 = threading.Thread(target = jonny_get_link)

    #–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
    t1.start()
    t2.start()

    #–ñ–¥—ë–º –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –ø–æ—Ç–æ–∫–∏
    t1.join()
    t2.join()

    bot.edit_message_text ('–í—ã–±–∏—Ä–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n[////////////////    ]', chat_id=message.chat.id, message_id=message.message_id + 1)
    image_list = image_depp_list + image_shalame_list        
    image_list = list(set(image_list) - set(line_list))

    if len(image_list):
        time.sleep(1.5)
        bot.edit_message_text ('–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n[//////////////////  ]', chat_id = message.chat.id, message_id=message.message_id + 1)
        time.sleep(1.5)
        random.shuffle(image_list)
        img_url = random.choice(image_list)
        used_links.write(img_url + '\n')
        bot.edit_message_text ('–ó–∞–≥—Ä—É–∂–µ–Ω–æ\n[////////////////////]', chat_id = message.chat.id, message_id=message.message_id + 1)
        return img_url
    else:
        bot.send_message(message.chat.id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. ')


def audio_to_text(dest_name: str, message):

    """
    –ü–µ—Ä–µ–≤–æ–¥ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç

    Args:
        dest_name (str): –ü—É—Å—Ç—å –¥–æ —Ñ–∞–π–ª–∞
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot

    Returns:
        result: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è
    """

    try:
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ , –≤ —Ñ–æ—Ä–º–∞—Ç–µ ".vaw" –≤ —Ç–µ–∫—Å—Ç
        r = sr.Recognizer() # —Ç–∞–∫–æ–µ –≤–æ–æ–±—â–µ –Ω–∞–¥–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ç—å?
        # —Ç—É—Ç –º—ã —á–∏—Ç–∞–µ–º –Ω–∞—à .vaw —Ñ–∞–π–ª
        message = sr.AudioFile(dest_name)
        with message as source:
            audio = r.record(source)
        result = r.recognize_google(audio, language="ru_RU") # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        return result
    except:
        bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

# TODO –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
def mat_check(message, type_event:str = 'None'):

    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –º–∞—Ç

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
        type_event (str): –¢–∏–ø —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –≤ –ª–æ–≥–∏ (–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ç.–¥.)

    Returns:
        True: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –º–∞—Ç. –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    """

    if message.content_type == 'text':
        row = db_select_user_by_id(id_user=message.from_user.id)
        words = message.text.split(' ')
        for i in words:
            text = i.lower()
            result = re.match(r'\b((—É|[–Ω–∑]–∞|(—Ö–∏—Ç—Ä–æ|–Ω–µ)?–≤–∑?[—ã—å—ä]|—Å[—å—ä]|(–∏|—Ä–∞)[–∑—Å]—ä?|(–æ[—Ç–±]|–ø–æ–¥)[—å—ä]?|(.\B)+?[–æ–∞–µ–∏])?-?([–µ—ë]–±(?!–æ[—Ä–π])|–∏[–ø–±][–∞–µ][—Ç—Ü]).*?|(–Ω[–∏–µ–∞]|([–¥–ø]|–≤–µ—Ä—Ç)–æ|—Ä–∞[–∑—Å]|–∑?–∞|—Å(–º–µ)?|–æ(—Ç|–¥–Ω–æ)?|–∞–ø—á)?-?—Ö—É([—è–π–∏–µ—ë—é]|–ª–∏(?!–≥–∞–Ω)).*?|(–≤[–∑—ã]|(—Ç—Ä–∏|–¥–≤–∞|—á–µ—Ç—ã—Ä–µ)–∂–¥—ã|(–Ω|—Å—É–∫)–∞)?-?–±–ª(—è(?!(—Ö|—à[–∫–Ω]|–º–±)[–∞—É–µ—ã–∏–æ]).*?|[–µ—ç][–¥—Ç]—å?)|(—Ä–∞[—Å–∑]|[–∑–Ω]–∞|[—Å–æ]|–≤—ã?|–ø(–µ—Ä–µ|—Ä[–æ–∏–µ]|–æ–¥)|–∏[–∑—Å]—ä?|[–∞–æ]—Ç)?–ø[–∏–µ—ë]–∑–¥.*?|(–∑–∞)?–ø[–∏–µ]–¥[–∞–æ–µ]?—Ä([–æ–∞]–º|(–∞—Å)?(–Ω—É.*?|–∏(–ª–∏)?[–Ω—â–∫—Ç–ª]—å?)?|(–æ(—á[–µ–∏])?|–∞—Å)?–∫(–æ–π)|—é–≥)[–∞—É–µ—ã]?|–º–∞–Ω–¥([–∞—É–µ—ã–∏](–ª(–∏[—Å–∑—â])?[–∞—É–µ–∏—ã])?|–æ–π|[–∞–æ]–≤–æ—à—å?(–µ?–∫[–∞—É–µ])?|—é–∫(–æ–≤|[–∞—É–∏])?)|–º—É–¥([—è–∞–∏–æ].*?|–µ?–Ω([—å—é–∏—è]|–µ–π))|–º–ª—è([—Ç–¥]—å)?|–ª—è—Ç—å|([–Ω–∑]–∞|–ø–æ)—Ö|–º[–∞–æ]–ª[–∞–æ]—Ñ—å([—è–∏—é]|[–µ—ë–æ]–π))\b', text)
            #result = re.match(r'(\s+|^)[–ø–ün—Ä–†p]?[3–ó–∑–íB–≤–ün–ø—Ä–†pP–êaA–∞–ûoO0–æ]?[—Å–°cC–∏–òuU–ûoO0–æ–êaA–∞—ã–´—É–£y—Ç–¢T]?[–ü–øn][–∏–òuUeE–µ–ï][–∑–ó3][–î–¥Dd]\w*[\?\,\.\;\-]*|(\s+|^)[—Ä–†pP–ø–ün]?[—Ä–†pP–æ–ûoO0–∞–êaA–∑–ó3]?[–æ–ûoO0–∏–òuU–∞–êaAcC—Å–°–∑–ó3—Ç–¢T—É–£y]?[Xx–•—Ö][—É–£y][–π–ô–µ–ïeEe—è–Ø9—é–Æ]\w*[\?\,\.\;\-]*|(\s+|^)[–±–ø–ün–ë6][–ª–õ][—è–Ø9]([–¥—Ç–î–¢DT]\w*)?[\?\,\.\;\-]*|(\s+|^)(([–∑–ó–æ–ûoO03]?[–∞–êaA—Ç–¢T]?[—ä–™]?)|(\w+[–æ–ûOo0–µ–ïeE]))?[–µ–ïeE–∏–òuU—ë–Å][–±–ë6–ø–ü]([–∞–êaA–∏–òuU—É–£y]\w*)?[\?\,\.\;\-]*', i)
            if result != None:
                with open(logfile_mat, 'a', encoding='utf-8') as logm:
                    logm.write(str(datetime.datetime.today().strftime("%H:%M:%S")) + ': –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(row[1]) + ' ' + str(row[2]) + ' ' + ' –Ω–∞–ø–∏—Å–∞–ª "' + i + '" –ø—Ä–∏ ' + type_event + '.\n')
                try:
                    ydisk.upload("log_files/"+str(datetime.date.today()) + '_mat.log', "GuitarBOT_log/Log_mat/"+str(datetime.date.today()) + '_mat.log')
                except:
                    ydisk.remove("GuitarBOT_log/Log_mat/"+str(datetime.date.today()) + '_mat.log', permanently=True)
                    ydisk.upload("log_files/"+str(datetime.date.today()) + '_mat.log', "GuitarBOT_log/Log_mat/"+str(datetime.date.today()) + '_mat.log')

                return True
                

def auto_registration(message, event_status:int = 0):

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        message : –æ–±—ä–µ–∫—Ç message –æ—Ç telebot
        event_status (int): –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–µ–Ω 0 (–û—Ç–∫–ª—é—á–µ–Ω–∞)
    """

    rows = db_select_user_by_id(id_user = message.from_user.id)
    if rows == None:
        id_user = message.from_user.id
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        nickname = message.from_user.username
        db_insert_user(id_user=id_user, first_name=first_name, last_name=last_name, nickname=nickname, event_status=event_status)